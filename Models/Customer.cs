// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using aaronKuechle_Week10_2nd_attempt_.Data;
using Microsoft.EntityFrameworkCore;

namespace aaronKuechle_Week10_2nd_attempt_.Models
{
    /// <summary>
    /// Current customer information. Also see the Person and Store tables.
    /// </summary>
    public partial class Customer
    {
        public Customer()
        {
            SalesOrderHeader = new HashSet<SalesOrderHeader>();
        }

        /// <summary>
        /// Primary key.
        /// </summary>
        public int CustomerId { get; set; }
        /// <summary>
        /// Foreign key to Person.BusinessEntityID
        /// </summary>
        public int? PersonId { get; set; }
        /// <summary>
        /// Foreign key to Store.BusinessEntityID
        /// </summary>
        public int? StoreId { get; set; }
        /// <summary>
        /// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        /// </summary>
        public int? TerritoryId { get; set; }
        /// <summary>
        /// Unique number identifying the customer assigned by the accounting system.
        /// </summary>
        public string AccountNumber { get; set; }
        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; }
        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; }

        public virtual Person Person { get; set; }
        public virtual Store Store { get; set; }
        public virtual SalesTerritory Territory { get; set; }
        public virtual ICollection<SalesOrderHeader> SalesOrderHeader { get; set; }
    }


public static class CustomerEndpoints
{
	public static void MapCustomerEndpoints (this IEndpointRouteBuilder routes)
    {
        routes.MapGet("/api/Customer", async (AdventureWorks2019Context db) =>
        {
            return await db.Customer.ToListAsync();
        })
        .WithName("GetAllCustomers");

        routes.MapGet("/api/Customer/{id}", async (int CustomerId, AdventureWorks2019Context db) =>
        {
            return await db.Customer.FindAsync(CustomerId)
                is Customer model
                    ? Results.Ok(model)
                    : Results.NotFound();
        })
        .WithName("GetCustomerById");

        routes.MapPut("/api/Customer/{id}", async (int CustomerId, Customer customer, AdventureWorks2019Context db) =>
        {
            var foundModel = await db.Customer.FindAsync(CustomerId);

            if (foundModel is null)
            {
                return Results.NotFound();
            }

            db.Update(customer);

            await db.SaveChangesAsync();

            return Results.NoContent();
        })
        .WithName("UpdateCustomer");

        routes.MapPost("/api/Customer/", async (Customer customer, AdventureWorks2019Context db) =>
        {
            db.Customer.Add(customer);
            await db.SaveChangesAsync();
            return Results.Created($"/Customers/{customer.CustomerId}", customer);
        })
        .WithName("CreateCustomer");


        routes.MapDelete("/api/Customer/{id}", async (int CustomerId, AdventureWorks2019Context db) =>
        {
            if (await db.Customer.FindAsync(CustomerId) is Customer customer)
            {
                db.Customer.Remove(customer);
                await db.SaveChangesAsync();
                return Results.Ok(customer);
            }

            return Results.NotFound();
        })
        .WithName("DeleteCustomer");
    }
}}